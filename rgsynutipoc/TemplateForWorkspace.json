{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "rgsynutipoc"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"LS_BlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_BlobStorage'"
		},
		"rgsynutipoc-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'rgsynutipoc-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:rgsynutipoc.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"sqlpocdemo_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'sqlpocdemo'"
		},
		"utiadlspoc_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'utiadlspoc'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rgutistr.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rgutistr.dfs.core.windows.net/"
		},
		"rgsynutipoc-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rgutistr.dfs.core.windows.net"
		},
		"sqlpocdemo_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "rgemutipoc.database.windows.net"
		},
		"sqlpocdemo_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "rgemsqlpoc"
		},
		"sqlpocdemo_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"utiadlspoc_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rgutistr.dfs.core.windows.net/"
		},
		"CDC_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Storage/storageAccounts/rgutistr"
		},
		"wo_cdc_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Storage/storageAccounts/rgutistr"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/APIValidationPipeline1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FetchTemplatesFromBlob",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TemplatesDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TemplateValidations",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "FetchTemplatesFromBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": {
									"value": "application/json",
									"type": "Expression"
								}
							},
							"url": "https://validateapi.ddns.net/api/validate/execute",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "@activity('FetchTemplatesFromBlob').output.value[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch Validation Results",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "TemplateValidations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ApiResponse",
							"value": {
								"value": "@activity('TemplateValidations').output.Response\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Validation Results To Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Fetch Validation Results",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "mydata",
										"value": {
											"value": "@variables('ApiResponse')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "mydata",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSVInputDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVOutputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Validation Results To SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Validation Results To Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['templateId']"
										},
										"sink": {
											"name": "template_id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ruleName']"
										},
										"sink": {
											"name": "rule_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['query']"
										},
										"sink": {
											"name": "query",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['resultStatus']"
										},
										"sink": {
											"name": "result_status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['resultData']"
										},
										"sink": {
											"name": "result_data",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['createdAt']"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "JSONValidationResultDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capture Error Details",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Validation Results To SQL",
								"dependencyConditions": [
									"Failed",
									"Skipped"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorDetails",
							"value": {
								"value": "@concat(activity('FetchTemplatesFromBlob').error?.message,'|', activity('TemplateValidations')?.error?.message, '|',\nactivity('Validation Results To Blob')?.error?.message, '|',\nactivity('Validation Results To SQL')?.error?.message)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"stage": {
						"type": "string",
						"defaultValue": "post-ingestion-cdc"
					}
				},
				"variables": {
					"ApiResponse": {
						"type": "String"
					},
					"errorDetails": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T15:42:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TemplatesDataSet')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/CSVInputDataset')]",
				"[concat(variables('workspaceId'), '/datasets/CSVOutputDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/JSONValidationResultDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/SQLDataset')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Full Load",
						"type": "SynapseNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "APIValidationPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Full Load",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "UTIPOC1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Raw Delete",
						"type": "Delete",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Full Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "user",
									"filepath": "RAW",
									"filename": "*.parquet"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "user/Delete Logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ADLS",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Raw Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ADLS",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "UTIPOC1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Raw Delete 2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "user",
									"filepath": "RAW",
									"filename": "*.parquet"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "user/Delete Logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "SQL",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Raw Delete 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "SQL",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "UTIPOC1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "APIValidationPipeline",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"waitOnCompletion": true,
							"parameters": {
								"stage": "post-ingestion-cdc"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T15:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Full Load')]",
				"[concat(variables('workspaceId'), '/bigDataPools/UTIPOC1')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/ADLS')]",
				"[concat(variables('workspaceId'), '/notebooks/SQL')]",
				"[concat(variables('workspaceId'), '/linkedServices/rgsynutipoc-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook 1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 1",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-28T15:58:33Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WO_CDC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Full Load",
						"type": "SynapseNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "WOCDC_FullLoad",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "UTIPOC1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Raw Delete",
						"type": "Delete",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "user",
									"filepath": "RAW_WOCDC",
									"filename": "*.parquet"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "user/Delete Logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "WOCDC_Incremental",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Raw Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "WOCDC_Incremental",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "UTIPOC1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Raw Delete 1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "WOCDC_Incremental",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "user",
									"filepath": "RAW_WOCDC",
									"filename": "*.parquet"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "user/Delete Logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Full Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "RAW_WOCDC",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"campus_key",
										"campus_code"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "user",
									"filepath": "RAW_WOCDC",
									"filename": "*.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLDataset_WOCDC",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"waitOnCompletion": true,
							"parameters": {
								"stage": "post-ingestion-wocdc"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T15:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/WOCDC_FullLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/UTIPOC1')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/WOCDC_Incremental')]",
				"[concat(variables('workspaceId'), '/datasets/SQLDataset_WOCDC')]",
				"[concat(variables('workspaceId'), '/linkedServices/rgsynutipoc-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Campus",
						"fileSystem": "user"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rgsynutipoc-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVInputDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "input.txt",
						"container": "user"
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVOutputDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummyfile.json",
						"folderPath": "ValidationResults",
						"container": "saipriyanka"
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JSONValidationResultDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummyfile.json",
						"folderPath": "ValidationResults",
						"container": "saipriyanka"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "null"
						},
						"templateId": {
							"type": "integer"
						},
						"ruleName": {
							"type": "string"
						},
						"query": {
							"type": "string"
						},
						"resultStatus": {
							"type": "string"
						},
						"resultData": {
							"type": "string"
						},
						"createdAt": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rgsynutipoc-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"filepath": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filepath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/rgsynutipoc-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpocdemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "template_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "rule_name",
						"type": "varchar"
					},
					{
						"name": "query",
						"type": "varchar"
					},
					{
						"name": "result_status",
						"type": "varchar"
					},
					{
						"name": "result_data",
						"type": "text"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "validation_results_table"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpocdemo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLDataset_WOCDC')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpocdemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "template_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "rule_name",
						"type": "varchar"
					},
					{
						"name": "query",
						"type": "varchar"
					},
					{
						"name": "result_status",
						"type": "varchar"
					},
					{
						"name": "result_data",
						"type": "text"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "WOCDCCampusDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpocdemo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TemplatesDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BasicValidationTemplate.json",
						"folderPath": {
							"value": "@concat('ValidationTemplates/', pipeline().parameters.stage)",
							"type": "Expression"
						},
						"container": "user"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"templateId": {
							"type": "integer"
						},
						"templateName": {
							"type": "string"
						},
						"stage": {
							"type": "string"
						},
						"isActive": {
							"type": "boolean"
						},
						"dataSource": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string"
								},
								"connection": {
									"type": "object",
									"properties": {
										"jdbcUrl": {
											"type": "string"
										},
										"userName": {
											"type": "string"
										},
										"password": {
											"type": "null"
										}
									}
								}
							}
						},
						"rules": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"rule": {
										"type": "string"
									},
									"query": {
										"type": "string"
									},
									"fields": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_BlobStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_BlobStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rgsynutipoc-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('rgsynutipoc-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rgsynutipoc-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('rgsynutipoc-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpocdemo')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('sqlpocdemo_properties_typeProperties_server')]",
					"database": "[parameters('sqlpocdemo_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('sqlpocdemo_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('sqlpocdemo_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/utiadlspoc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('utiadlspoc_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('utiadlspoc_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDC')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CDC",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/user/blobs/RAW/",
					"blobPathEndsWith": ".parquet",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('CDC_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CDC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wo_cdc')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "WO_CDC",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/user/blobs/RAW_WOCDC/",
					"blobPathEndsWith": ".parquet",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('wo_cdc_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/WO_CDC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n FROM [default].[dbo].[campuscdc] where [Operations] = 'INSERT'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 11')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current Date]\n FROM [default].[dbo].[fullload]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 12')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 15')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 16')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current_Date]\n FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 17')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current_Date]\n FROM [default].[dbo].[campuscdc]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 18')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current Date]\n FROM [default].[dbo].[campuscdc]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 19')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://rgutistr.dfs.core.windows.net/user/History/2024/10/11/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 20')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 21')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 22')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 23')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 24')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 25')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 26')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 27')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current_Date]\n FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 28')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 29')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE db\nWITH (\n    LOCATION = 'https://rgutistr.dfs.core.windows.net/user/History/2024/10/11/*.parquet'\n);\n\nCREATE EXTERNAL TABLE cdc.campuscdc\n(\n    column1 INT,\n    column2 NVARCHAR(50),\n    column3 DATETIME\n    -- Define all columns according to your Parquet file structure\n)\nWITH (\n    LOCATION = 'https://rgutistr.dfs.core.windows.net/user/History/2024/10/11/*.parquet', \n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFormat\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "EmployeeDataLakeDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 30')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 31')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 32')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 33')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 34')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 35')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n FROM [demo].[dbo].[campuslatest]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 36')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 37')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[Current_Date]\n FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 38')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) * FROM [default].[dbo].[campusdetails]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 39')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://rgutistr.dfs.core.windows.net/user/Campus/CampusDetails10-18-2024_07_38_56.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'user_rgutistr_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [user_rgutistr_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://user@rgutistr.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.swetha (\n\t[campus_key] int,\n\t[campus_code] nvarchar(4000),\n\t[campus_name] nvarchar(4000),\n\t[mail_id] nvarchar(4000),\n\t[course] nvarchar(4000),\n\t[creation_date] datetime2(7),\n\t[update_date] datetime2(7),\n\t[Flag] nvarchar(4000),\n\t[Operations] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'History/2024/10/11/CampusDetails_2024-10-11.parquet',\n\tDATA_SOURCE = [user_rgutistr_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.swetha\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "cdc",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'user_rgutistr_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [user_rgutistr_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://user@rgutistr.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE timpilschema.campus (\n\t[campus_key] int,\n\t[campus_code] nvarchar(4000),\n\t[campus_name] nvarchar(4000),\n\t[mail_id] nvarchar(4000),\n\t[course] nvarchar(4000),\n\t[creation_date] datetime2(7),\n\t[update_date] datetime2(7),\n\t[Flag] nvarchar(4000),\n\t[Operations] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'History/2024/10/11/CampusDetails_2024-10-11.parquet',\n\tDATA_SOURCE = [user_rgutistr_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM timpilschema.campus\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "cdc",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create DATABASE dhinesh",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "cdc",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [campus_key]\n,[campus_code]\n,[campus_name]\n,[mail_id]\n,[course]\n,[creation_date]\n,[update_date]\n,[Flag]\n,[Operations]\n,[start_date]\n,[end_date]\n FROM [demonew].[dbo].[campuslatestnew]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demonew",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/externaltablecreation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE DATABASE processed;\nGO\n\nUSE processed;\nGO\n\ncreate schema sch;\nGO\n\nCREATE EXTERNAL DATA SOURCE blobconn\nWITH (\n    LOCATION = 'https://rgutistr.blob.core.windows.net/user'\n);\n\nCREATE EXTERNAL FILE FORMAT [ParquetFormat]\nWITH (\n    FORMAT_TYPE = PARQUET\n);\n\n\n\nCREATE EXTERNAL TABLE sch.campusNew (\n\t[campus_key] int,\n\t[campus_code] nvarchar(4000),\n\t[campus_name] nvarchar(4000),\n\t[mail_id] nvarchar(4000),\n\t[course] nvarchar(4000),\n\t[creation_date] datetime2(7),\n\t[update_date] datetime2(7),\n\t[Flag] nvarchar(4000),\n\t[Operations] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Campus/',\n\tDATA_SOURCE = blobconn,\n\tFILE_FORMAT = [ParquetFormat]\n\t)\nGO\n\nselect * from sch.campusNew",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "processed",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9e248ad5-28a3-4262-9e3e-ab3444b856c2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"from datetime import datetime"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import functions as F\r\n",
							"from pyspark.sql import Window"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql import Row"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Campus_df = spark.read.load('abfss://user@rgutistr.dfs.core.windows.net/RAW/*.parquet', format='parquet').filter(col(\"__$operation\") != 3)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"windowSpec = Window.partitionBy(\"campus_key\", \"campus_code\").orderBy(col(\"__$start_lsn\").desc())\r\n",
							"df_updated = Campus_df.withColumn(\"Flag\", when(row_number().over(windowSpec) == 1, \"Y\").otherwise(\"N\"))\r\n",
							"df_sort = df_updated.sort(col(\"__$start_lsn\").asc()) \r\n",
							"df_operation = df_sort.withColumn(\"Operations\", when(col(\"__$operation\") == 1, \"DELETE\")\r\n",
							"                                                    .when(col(\"__$operation\") == 2, \"INSERT\")\r\n",
							"                                                        .when(col(\"__$operation\") == 3, \"BEFORE UPDATE\")\r\n",
							"                                                            .when(col(\"__$operation\") == 4, \"AFTER UPDATE\")\r\n",
							"                                                                .otherwise(None)).drop(\"__$start_lsn\",\"__$end_lsn\",\"__$seqval\",\"__$operation\",\"__$update_mask\",\"__$command_id\")\\\r\n",
							"                                                                .withColumn(\"Current_Date\", lit(current_timestamp()))"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%sql\r\n",
							"CONVERT TO DELTA default.campusdetails;"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_operation.createOrReplaceTempView(\"new_data_table\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\r\n",
							"              MERGE INTO default.campusdetails AS target\r\n",
							"              USING (SELECT campus_key, campus_code, update_date, creation_date FROM new_data_table) AS source\r\n",
							"              ON target.campus_key = source.campus_key\r\n",
							"              AND target.campus_code = source.campus_code\r\n",
							"              WHEN MATCHED THEN\r\n",
							"                UPDATE SET \r\n",
							"                  target.Flag = 'N',\r\n",
							"                  target.update_date = DATE_SUB(source.creation_date, 1);\r\n",
							"\"\"\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\r\n",
							"    INSERT INTO default.campusdetails\r\n",
							"    SELECT campus_key, campus_code, campus_name, mail_id, course, creation_date, update_date, Flag, Operations, Current_Date\r\n",
							"    FROM new_data_table\r\n",
							"\"\"\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Full Load')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8f131c35-f3e8-4aae-8d57-83418dc9e4e1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql.types import *\n",
							"from datetime import datetime\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import Window\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql import Row\n",
							"Campus_df = spark.read.load('abfss://user@rgutistr.dfs.core.windows.net/RAW/*.parquet', format='parquet').filter(col(\"__$operation\") != 3)\n",
							"windowSpec = Window.partitionBy(\"campus_key\", \"campus_code\").orderBy(col(\"__$start_lsn\").desc())\n",
							"df_updated = Campus_df.withColumn(\"Flag\", when(row_number().over(windowSpec) == 1, \"Y\").otherwise(\"N\"))\n",
							"df_sort = df_updated.sort(col(\"__$start_lsn\").asc())\n",
							"df_operation = df_sort.withColumn(\"Operations\", when(col(\"__$operation\") == 1, \"DELETE\")\n",
							"                                                    .when(col(\"__$operation\") == 2, \"INSERT\")\n",
							"                                                        .when(col(\"__$operation\") == 3, \"BEFORE UPDATE\")\n",
							"                                                            .when(col(\"__$operation\") == 4, \"AFTER UPDATE\")\n",
							"                                                                .otherwise(None)).drop(\"__$start_lsn\",\"__$end_lsn\",\"__$seqval\",\"__$operation\",\"__$update_mask\",\"__$command_id\")\\\n",
							"                                                                .withColumn(\"Current_Date\", lit(current_timestamp()))\n",
							"df_operation.write \\\n",
							"    .mode(\"overwrite\") \\\n",
							"    .saveAsTable(f\"default.campusdetails\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "UTIPOC1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2b1c0eb1-dcf4-4083-8682-52f5c1ffabb5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Synapse/workspaces/rgsynutipoc/bigDataPools/UTIPOC1",
						"name": "UTIPOC1",
						"type": "Spark",
						"endpoint": "https://rgsynutipoc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/UTIPOC1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql.types import *\n",
							"from datetime import datetime"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import Window"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql import Row"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%sql\n",
							"CONVERT TO DELTA default.campusdetails;"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"DROP TABLE default.campusdetails\"\"\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a385c985-c4bf-4ac4-b935-51bbbc125890"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"from datetime import datetime\r\n",
							"from pyspark.sql import functions as F\r\n",
							"from pyspark.sql import Window\r\n",
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql import Row"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_sql = spark.sql(\"\"\"Select * from default.campusdetails;\"\"\")\r\n",
							"df_filter = df_sql.filter((col(\"Flag\") == \"Y\") & (col(\"Operations\") != \"DELETE\")).drop(\"Flag\", \"Operations\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"jdbc_hostname = \"rgemutipoc.database.windows.net\"\r\n",
							"jdbc_port = \"1433\"\r\n",
							"jdbc_database = \"rgemsqlpoc\"\r\n",
							"jdbc_username = \"sqladmin\"\r\n",
							"jdbc_password = \"SqlAdpo@\"\r\n",
							"jdbc_url = f\"jdbc:sqlserver://{jdbc_hostname}:{jdbc_port};database={jdbc_database}\"\r\n",
							"#-------------------------------------------------------------------------------------------------------------------------------------\r\n",
							"# Target Table names prefixing with target_table_{table_Name}\r\n",
							"#-------------------------------------------------------------------------------------------------------------------------------------\r\n",
							"target_table = '[dbo].[campusdetails]'\r\n",
							" \r\n",
							"#-------------------------------------------------------------------------------------------------------------------------------------\r\n",
							"# Writing the final result dataframes to SQL\r\n",
							"df_filter.write.format(\"jdbc\").option(\"url\", jdbc_url).option(\"dbtable\", target_table).option(\"user\", jdbc_username).option(\"password\", jdbc_password).mode(\"overwrite\").save()"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WOCDC_FullLoad')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b829e7ab-9d44-470d-81cb-888f8f1ed670"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql import Row\n",
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import Window\n",
							"from datetime import datetime"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql import Window\n",
							" \n",
							"# Load the data and filter out the unwanted operations (operation 3 is 'BEFORE UPDATE')\n",
							"Campus_df = spark.read.load('abfss://user@rgutistr.dfs.core.windows.net/RAW_WOCDC/*.parquet', format='parquet')\n",
							" \n",
							"   \n",
							" \n",
							"# Window Specification for partitioning by campus_key and campus_code\n",
							"windowSpec = Window.partitionBy(\"campus_key\", \"campus_code\").orderBy(col(\"update_date\").desc())\n",
							" \n",
							"# Mark the latest record in each partition\n",
							"df_updated = Campus_df.withColumn(\"Flag\", when(row_number().over(windowSpec) == 1, \"Y\").otherwise(\"N\"))\n",
							" \n",
							"# Sort by start_lsn in ascending order\n",
							"df_sort = df_updated.sort(col(\"update_date\").asc())\n",
							" \n",
							" \n",
							"# Example: Course update from 'Course A' to 'Course H'\n",
							"df_operation = df_sort.withColumn(\"start_date\", lit(current_date())) \\\n",
							"                           .withColumn(\"end_date\", expr(\"date_add('9999-12-31', 0)\"))  # Representing infinity\n",
							"df_operation.write \\\n",
							"    .mode(\"overwrite\") \\\n",
							"    .saveAsTable(f\"demonew.campuslatestnew\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WOCDC_Incremental')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "53eabcd1-52ec-4e71-bc3f-83bb8f4af8fe"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql import Row\n",
							"from pyspark.sql import *\n",
							"from pyspark.sql.functions import *\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import Window\n",
							"from datetime import datetime"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.load('abfss://user@rgutistr.dfs.core.windows.net/RAW_WOCDC/*.parquet', format='parquet')\n",
							"windowSpec = Window.partitionBy(\"campus_key\", \"campus_code\").orderBy(col(\"update_date\").desc())\n",
							" \n",
							"# Mark the latest record in each partition\n",
							"df_updated1 = df.withColumn(\"Flag\", when(row_number().over(windowSpec) == 1, \"Y\").otherwise(\"N\"))\n",
							" \n",
							"# Sort by start_lsn in ascending order\n",
							"df_sort1 = df_updated1.sort(col(\"update_date\").asc())\n",
							" \n",
							" \n",
							"# Example: Course update from 'Course A' to 'Course H'\n",
							"df_operation1 = df_sort1.withColumn(\"start_date\", lit(current_date())) \\\n",
							"                           .withColumn(\"end_date\", expr(\"date_add('9999-12-31', 0)\"))"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_operation1.createOrReplaceTempView(\n",
							"\"demoWOCDC\"\n",
							")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%sql\n",
							"CONVERT TO DELTA demonew.campuslatestnew;"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\n",
							"              MERGE INTO demonew.campuslatestnew AS target\n",
							"              USING (SELECT campus_key, campus_code, start_date, end_date FROM demoWOCDC) AS source\n",
							"              ON target.campus_key = source.campus_key\n",
							"              AND target.campus_code = source.campus_code\n",
							"              WHEN MATCHED THEN\n",
							"                UPDATE SET\n",
							"                  target.Flag = 'N',\n",
							"                  target.end_date = DATE_SUB(source.start_date, 1);\n",
							"\"\"\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\n",
							"    INSERT INTO demonew.campuslatestnew\n",
							"    SELECT campus_key, campus_code, campus_name, mail_id, course, creation_date, update_date, Flag, start_date, end_date\n",
							"    FROM demoWOCDC\n",
							"\"\"\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EmployeeDataLakeDB')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "EmployeeDataLakeDB",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://user@rgutistr.dfs.core.windows.net/paquet file/employee_history.parquet",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "utiadlspoc"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 2,
							"ObjectId": "c0231b1f-897b-4753-8563-c50f95ff47a5"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "EmployeeHistory",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "EmployeeDataLakeDB",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "EmployeeID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "FirstName",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LastName",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DateOfBirth",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HireDate",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "JobTitle",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DepartmentID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "EffectiveDate",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "IsCurrent",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										}
									}
								],
								"ColumnSetEntityName": "f7109670-5262-4fb0-a219-89f672807046",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://user@rgutistr.dfs.core.windows.net/paquet file/employee_history.parquet",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://user@rgutistr.dfs.core.windows.net/paquet file/employee_history.parquet",
									"Properties": {
										"LinkedServiceName": "utiadlspoc",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"EmployeeID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FirstName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"LastName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DateOfBirth\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"HireDate\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"JobTitle\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DepartmentID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"EffectiveDate\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IsCurrent\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "6b46e894-4269-43b9-9f2e-e0ec51145af5",
							"Description": ""
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cdc')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "cdc",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://CDC@rgutistr.dfs.core.windows.net/onpremCDC.parquet",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "rgsynutipoc-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "115e5458-65f6-49a6-90da-16d74ed169f5"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UTIPOC1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--rgsynutipoc-rgutistr')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Storage/storageAccounts/rgutistr",
				"groupId": "dfs",
				"fqdns": [
					"rgutistr.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--rgsynutipoc')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Synapse/workspaces/rgsynutipoc",
				"groupId": "sql",
				"fqdns": [
					"rgsynutipoc.58f52cf2-d3bd-4249-b453-79e2ff459230.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--rgsynutipoc')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/3abb7399-eedb-4a6d-9184-65148f6c282e/resourceGroups/bicep-uti-poc/providers/Microsoft.Synapse/workspaces/rgsynutipoc",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"rgsynutipoc-ondemand.58f52cf2-d3bd-4249-b453-79e2ff459230.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}