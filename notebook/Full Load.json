{
	"name": "Full Load",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8f131c35-f3e8-4aae-8d57-83418dc9e4e1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import *\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from datetime import datetime\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql import Row\n",
					"Campus_df = spark.read.load('abfss://user@rgutistr.dfs.core.windows.net/RAW/*.parquet', format='parquet').filter(col(\"__$operation\") != 3)\n",
					"windowSpec = Window.partitionBy(\"campus_key\", \"campus_code\").orderBy(col(\"__$start_lsn\").desc())\n",
					"df_updated = Campus_df.withColumn(\"Flag\", when(row_number().over(windowSpec) == 1, \"Y\").otherwise(\"N\"))\n",
					"df_sort = df_updated.sort(col(\"__$start_lsn\").asc())\n",
					"df_operation = df_sort.withColumn(\"Operations\", when(col(\"__$operation\") == 1, \"DELETE\")\n",
					"                                                    .when(col(\"__$operation\") == 2, \"INSERT\")\n",
					"                                                        .when(col(\"__$operation\") == 3, \"BEFORE UPDATE\")\n",
					"                                                            .when(col(\"__$operation\") == 4, \"AFTER UPDATE\")\n",
					"                                                                .otherwise(None)).drop(\"__$start_lsn\",\"__$end_lsn\",\"__$seqval\",\"__$operation\",\"__$update_mask\",\"__$command_id\")\\\n",
					"                                                                .withColumn(\"Current_Date\", lit(current_timestamp()))\n",
					"df_operation.write \\\n",
					"    .mode(\"overwrite\") \\\n",
					"    .saveAsTable(f\"default.campusdetails\")"
				]
			}
		]
	}
}